/**
 * 32-way demultiplexor:
 *   {in, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} if sel == 00000
 *   {0, in, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} if sel == 00001
 *   etc.
 *   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, in} if sel == 11111
 */

CHIP DMux32Way {
    IN in, sel[5];
    OUT o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, 
        o16,o17,o18,o19,o20,o21,o22,o23,o24,o25,o26, o27, o28, o29, o30, o31;

    PARTS:
    // Put your code here:
	DMux4Way(in=in, sel=sel[0..1], a=m, b=n, c=o, d=p);
	DMux8Way(in=m, sel=sel[2..4], a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7);
    	DMux8Way(in=n, sel=sel[2..4], a=o8, b=o9, c=o10, d=o11, e=o12, f=o13, g=o14, h=o15);
    	DMux8Way(in=o, sel=sel[2..4], a=o16, b=o17, c=o18, d=o19, e=o20, f=o21, g=o22, h=023);
    	DMux8Way(in=p, sel=sel[2..4], a=o24, b=o25, c=o26, d=o27, e=o28, f=o29, g=30, h=o31);
    	
}
